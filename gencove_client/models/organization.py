# coding: utf-8

"""
    Gencove Back API

    API for Gencove REST service. Visit <a href='https://gencove.com/'>gencove.com</a> and <a href='https://docs.gencove.com/'>docs.gencove.com</a> for more information. <br><hr><p>To work with Insomnia, you can generate a Gencove API key by <a target='_blank' href='https://web.gencove.com/account?filter=api-keys'>clicking here</a>. Once you have the API key and have imported the project in Insomnia as a <i>Request Collection</i>, enter the key in Insomnia under <i>Manage Environment</i>.</p><a href='https://insomnia.rest/run/?label=back_api2&uri=https%3A%2F%2Fv2-api-files-prod.s3.amazonaws.com%2Fpublic%2Finsomnia%2Finsomnia_gencove_prod.json' target='_blank'>Run in Insomnia</a><hr>

    The version of the OpenAPI document: v2
    Contact: info@gencove.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gencove_client.models.user_role_object import UserRoleObject
from typing import Optional, Set
from typing_extensions import Self


class Organization(BaseModel):
    """
    Organization
    """  # noqa: E501

    id: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=254)]
    expire_uploads_period_days: Optional[StrictInt] = None
    archive_period_days: Optional[StrictInt] = None
    archive_restore_period_days: Optional[StrictInt] = None
    roles: Optional[Dict[str, UserRoleObject]] = Field(default=None, description="Roles in the organization.")
    uploads_enabled: Optional[StrictBool] = Field(
        default=None, description="Designates whether the organization can access upload functionality."
    )
    delete_samples_enabled: Optional[StrictBool] = Field(
        default=None, description="Designates whether the organization can delete samples."
    )
    project_sharing_enabled: Optional[StrictBool] = Field(
        default=None, description="When enabled, allows organization to share projects with other organizations."
    )
    account_on_hold: Optional[StrictBool] = Field(
        default=None,
        description="When enabled, limits ability of organization to manage data and displays UI warning to organization users that invoice is past due.",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "expire_uploads_period_days",
        "archive_period_days",
        "archive_restore_period_days",
        "roles",
        "uploads_enabled",
        "delete_samples_enabled",
        "project_sharing_enabled",
        "account_on_hold",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "expire_uploads_period_days",
                "archive_period_days",
                "archive_restore_period_days",
                "roles",
                "uploads_enabled",
                "delete_samples_enabled",
                "project_sharing_enabled",
                "account_on_hold",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in roles (dict)
        _field_dict = {}
        if self.roles:
            for _key_roles in self.roles:
                if self.roles[_key_roles]:
                    _field_dict[_key_roles] = self.roles[_key_roles].to_dict()
            _dict["roles"] = _field_dict
        # set to None if expire_uploads_period_days (nullable) is None
        # and model_fields_set contains the field
        if self.expire_uploads_period_days is None and "expire_uploads_period_days" in self.model_fields_set:
            _dict["expire_uploads_period_days"] = None

        # set to None if archive_period_days (nullable) is None
        # and model_fields_set contains the field
        if self.archive_period_days is None and "archive_period_days" in self.model_fields_set:
            _dict["archive_period_days"] = None

        # set to None if archive_restore_period_days (nullable) is None
        # and model_fields_set contains the field
        if self.archive_restore_period_days is None and "archive_restore_period_days" in self.model_fields_set:
            _dict["archive_restore_period_days"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "expire_uploads_period_days": obj.get("expire_uploads_period_days"),
                "archive_period_days": obj.get("archive_period_days"),
                "archive_restore_period_days": obj.get("archive_restore_period_days"),
                "roles": (
                    dict((_k, UserRoleObject.from_dict(_v)) for _k, _v in obj["roles"].items())
                    if obj.get("roles") is not None
                    else None
                ),
                "uploads_enabled": obj.get("uploads_enabled"),
                "delete_samples_enabled": obj.get("delete_samples_enabled"),
                "project_sharing_enabled": obj.get("project_sharing_enabled"),
                "account_on_hold": obj.get("account_on_hold"),
            }
        )
        return _obj
