# coding: utf-8

"""
    Gencove Back API

    API for Gencove REST service. Visit <a href='https://gencove.com/'>gencove.com</a> and <a href='https://docs.gencove.com/'>docs.gencove.com</a> for more information. <br><hr><p>To work with Insomnia, you can generate a Gencove API key by <a target='_blank' href='https://web.gencove.com/account?filter=api-keys'>clicking here</a>. Once you have the API key and have imported the project in Insomnia as a <i>Request Collection</i>, enter the key in Insomnia under <i>Manage Environment</i>.</p><a href='https://insomnia.rest/run/?label=back_api2&uri=https%3A%2F%2Fv2-api-files-prod.s3.amazonaws.com%2Fpublic%2Finsomnia%2Finsomnia_gencove_prod.json' target='_blank'>Run in Insomnia</a><hr>

    The version of the OpenAPI document: v2
    Contact: info@gencove.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class PipelineCapabilities(BaseModel):
    """
    PipelineCapabilities
    """  # noqa: E501

    id: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=254)] = Field(
        description="Name from pipeline config"
    )
    key: Annotated[str, Field(min_length=1, strict=True, max_length=254)] = Field(
        description="Key from pipeline config"
    )
    private: Optional[StrictBool] = Field(default=None, description="True if private")
    merge_vcfs_enabled: Optional[StrictBool] = Field(default=None, description="Set to True if MergeVCFs can be run")
    supported_project_modifications: Optional[Dict[str, Any]] = Field(
        default=None,
        description="List of project modification objects supported by the pipeline. Only the modifications listed under 'key' can be used. Note that 'value' is only used by the front-end to determine whether the check box should be set to True or False by default.",
    )
    modifications_enabled: Optional[StrictStr] = None
    species: Optional[StrictStr] = Field(default=None, description="Species")
    pipeline_category: Optional[StrictStr] = Field(default=None, description="Category of the pipeline capability")
    description_markdown: Optional[StrictStr] = Field(
        default=None, description="Description markdown of a pipeline capability. "
    )
    datasets: Optional[StrictStr] = Field(default=None, description="Dataset descriptions.")
    steps: Optional[StrictStr] = Field(default=None, description="Pipeline capability steps that are enabled.")
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "key",
        "private",
        "merge_vcfs_enabled",
        "supported_project_modifications",
        "modifications_enabled",
        "species",
        "pipeline_category",
        "description_markdown",
        "datasets",
        "steps",
    ]

    @field_validator("pipeline_category")
    def pipeline_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Human Genomics", "Agriculture Animals & Plant Genomics", "Companion Animals", "Other"]):
            raise ValueError(
                "must be one of enum values ('Human Genomics', 'Agriculture Animals & Plant Genomics', 'Companion Animals', 'Other')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "modifications_enabled",
                "species",
                "description_markdown",
                "datasets",
                "steps",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if supported_project_modifications (nullable) is None
        # and model_fields_set contains the field
        if self.supported_project_modifications is None and "supported_project_modifications" in self.model_fields_set:
            _dict["supported_project_modifications"] = None

        # set to None if pipeline_category (nullable) is None
        # and model_fields_set contains the field
        if self.pipeline_category is None and "pipeline_category" in self.model_fields_set:
            _dict["pipeline_category"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "key": obj.get("key"),
                "private": obj.get("private"),
                "merge_vcfs_enabled": obj.get("merge_vcfs_enabled"),
                "supported_project_modifications": obj.get("supported_project_modifications"),
                "modifications_enabled": obj.get("modifications_enabled"),
                "species": obj.get("species"),
                "pipeline_category": obj.get("pipeline_category"),
                "description_markdown": obj.get("description_markdown"),
                "datasets": obj.get("datasets"),
                "steps": obj.get("steps"),
            }
        )
        return _obj
