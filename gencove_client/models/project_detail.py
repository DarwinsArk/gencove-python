# coding: utf-8

"""
    Gencove Back API

    API for Gencove REST service. Visit <a href='https://gencove.com/'>gencove.com</a> and <a href='https://docs.gencove.com/'>docs.gencove.com</a> for more information. <br><hr><p>To work with Insomnia, you can generate a Gencove API key by <a target='_blank' href='https://web.gencove.com/account?filter=api-keys'>clicking here</a>. Once you have the API key and have imported the project in Insomnia as a <i>Request Collection</i>, enter the key in Insomnia under <i>Manage Environment</i>.</p><a href='https://insomnia.rest/run/?label=back_api2&uri=https%3A%2F%2Fv2-api-files-prod.s3.amazonaws.com%2Fpublic%2Finsomnia%2Finsomnia_gencove_prod.json' target='_blank'>Run in Insomnia</a><hr>

    The version of the OpenAPI document: v2
    Contact: info@gencove.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gencove_client.models.project_file_nested import ProjectFileNested
from typing import Optional, Set
from typing_extensions import Self


class ProjectDetail(BaseModel):
    """
    ProjectDetail
    """  # noqa: E501

    id: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=254)]
    description: Optional[StrictStr] = None
    created: Optional[datetime] = None
    modified: Optional[StrictStr] = Field(default=None, description="Sample's last non-internal status that was added.")
    hidden: Optional[StrictBool] = Field(default=None, description="Flag to hide the project.")
    organization: StrictStr
    organization_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None, description="Organization name"
    )
    sample_count: Optional[StrictStr] = None
    hidden_sample_count: Optional[StrictStr] = None
    pipeline_capabilities: StrictStr = Field(description="Versioned pipeline capabilities")
    project_modifications: Optional[Dict[str, Any]] = Field(
        default=None, description="Allows for pipeline modifications e.g. disabling QC"
    )
    roles: Optional[StrictStr] = Field(default=None, description="Roles for the project in the organization.")
    webhook_url: Optional[StrictStr] = Field(
        default=None,
        description="Legacy: this field is not used anymore, it is present in the response for the sake of backwards compatility with clients.",
    )
    is_shared: Optional[StrictStr] = None
    locked: Optional[StrictBool] = Field(default=None, description="Flag to set the project to locked mode.")
    files: Optional[List[ProjectFileNested]] = Field(default=None, description="Project files")
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "description",
        "created",
        "modified",
        "hidden",
        "organization",
        "organization_name",
        "sample_count",
        "hidden_sample_count",
        "pipeline_capabilities",
        "project_modifications",
        "roles",
        "webhook_url",
        "is_shared",
        "locked",
        "files",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "modified",
                "organization_name",
                "sample_count",
                "hidden_sample_count",
                "roles",
                "webhook_url",
                "is_shared",
                "files",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict["files"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "created": obj.get("created"),
                "modified": obj.get("modified"),
                "hidden": obj.get("hidden"),
                "organization": obj.get("organization"),
                "organization_name": obj.get("organization_name"),
                "sample_count": obj.get("sample_count"),
                "hidden_sample_count": obj.get("hidden_sample_count"),
                "pipeline_capabilities": obj.get("pipeline_capabilities"),
                "project_modifications": obj.get("project_modifications"),
                "roles": obj.get("roles"),
                "webhook_url": obj.get("webhook_url"),
                "is_shared": obj.get("is_shared"),
                "locked": obj.get("locked"),
                "files": (
                    [ProjectFileNested.from_dict(_item) for _item in obj["files"]]
                    if obj.get("files") is not None
                    else None
                ),
            }
        )
        return _obj
